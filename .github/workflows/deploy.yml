name: 배포

on:
  push:
    branches:
      - release

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker buildx build \
            -t ${{ vars.ECR_REPOSITORY_URI }}:${{ github.sha }} \
            -t ${{ vars.ECR_REPOSITORY_URI }}:latest \
            --push \
            .
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: ECS 태스크 정의 업데이트
        run: |
          TASK_DEFINITION=$(
          aws ecs describe-task-definition \
           --task-definition ${{ vars.ECS_TASK_DEFINITION }}
          )

          NEW_TASK_DEFINITION=$(
          echo $TASK_DEFINITION | jq \
            --arg IMAGE "${{ vars.ECR_REPOSITORY_URI }}:latest" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)'
          )

          # 새로운 태스크 정의 등록
          NEW_TASK_DEF_ARN=$(
            aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEFINITION" | \
            jq -r '.taskDefinition.taskDefinitionArn'
          )
          
          # 환경 파일에 변수 저장 (다음 단계에서 사용 가능)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: ECS 서비스 중지(프리티어 환경 고려)
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --desired-count 0

      - name: ECS 서비스 업데이트
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF_ARN \
            --desired-count 1 \
            --force-new-deployment
        